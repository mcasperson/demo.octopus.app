step "approve-production-deployment" {
    condition = "Variable"
    name = "Approve Production Deployment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        is_required = true
        notes = "Require approval from someone with the appropriate permissions."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please add approval notes here."
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "create-web-app-service" {
    name = "Create Web App service"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = "Create a Load Balancer service for the web app on the target cluster."
        properties = {
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{OctoPetShop.WebApp.ServiceName}'
                  namespace: '#{OctoPetShop.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{OctoPetShop.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{OctoPetShop.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-windows"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:3.3.2-windows.ltsc2019"
        }
    }
}

step "deploy-web-app-containers" {
    name = "Deploy Web App containers"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployContainers"
        notes = "Deploy the web app containers to the target cluster."
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress,Octopus.Features.KubernetesConfigMap,Octopus.Features.KubernetesSecret"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CombinedVolumes = "[]"
            Octopus.Action.KubernetesContainers.Containers = "[{\"IsNew\":true,\"InitContainer\":\"False\",\"Ports\":[],\"EnvironmentVariables\":[{\"key\":\"ASPNETCORE_URLS\",\"value\":\"http://+:#{OctoPetShop.WebApp.HttpPort}\"},{\"key\":\"ProductServiceBaseUrl\",\"value\":\"#{OctoPetShop.ProductApi.Url}\"},{\"key\":\"ShoppingCartServiceBaseUrl\",\"value\":\"#{OctoPetShop.ShoppingCartApi.Url}\"},{\"key\":\"AppVersion\",\"value\":\"#{Octopus.Release.Number}\"},{\"key\":\"EnvironmentName\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"#{Octopus.Environment.Name}\"}],\"SecretEnvironmentVariables\":[],\"SecretEnvFromSource\":[],\"ConfigMapEnvironmentVariables\":[],\"ConfigMapEnvFromSource\":[],\"FieldRefEnvironmentVariables\":[],\"VolumeMounts\":[],\"AcquisitionLocation\":\"NotAcquired\",\"Name\":\"web-app\",\"PackageId\":\"octopussamples/octopetshop-web\",\"FeedId\":\"Feeds-1483\",\"Properties\":{},\"Command\":[],\"Args\":[],\"Resources\":{\"requests\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryRequest}\",\"cpu\":\"\",\"ephemeralStorage\":\"\"},\"limits\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryLimit}\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"nvidiaGpu\":\"\",\"amdGpu\":\"\"}},\"LivenessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"ReadinessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"StartupProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"Lifecycle\":{},\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"privileged\":\"\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"\",\"runAsUser\":\"\",\"capabilities\":{\"add\":[],\"drop\":[]},\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}}}]"
            Octopus.Action.KubernetesContainers.DeploymentAnnotations = "[{\"key\":\"kubernetes.io/change-cause\",\"value\":\"#{Octopus.Release.Number}\"}]"
            Octopus.Action.KubernetesContainers.DeploymentLabels = "{\"component\":\"web\",\"type\":\"main\"}"
            Octopus.Action.KubernetesContainers.DeploymentName = "#{OctoPetShop.WebApp.ServiceName}"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
            Octopus.Action.KubernetesContainers.DeploymentWait = "Wait"
            Octopus.Action.KubernetesContainers.DnsConfigOptions = "[]"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
            Octopus.Action.KubernetesContainers.LoadBalancerAnnotations = "[]"
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.KubernetesContainers.NodeAffinity = "[]"
            Octopus.Action.KubernetesContainers.PersistentVolumeClaims = "[]"
            Octopus.Action.KubernetesContainers.PodAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodAnnotations = "[]"
            Octopus.Action.KubernetesContainers.PodAntiAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.PodSecuritySysctls = "[]"
            Octopus.Action.KubernetesContainers.Replicas = "1"
            Octopus.Action.KubernetesContainers.SecretName = "octopetshop-shoppingcart-secrets"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"ops-connectionstring\":\"#{OctoPetShop.Database.ConnectionString}\"}"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServicePorts = "[]"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
            Octopus.Action.KubernetesContainers.Tolerations = "[]"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-windows"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:3.3.2-windows.ltsc2019"
        }

        packages "web-app" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/octopetshop-web"
            properties = {
                Extract = "False"
                PackageParameterName = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "send-completion-notification" {
    condition = "Variable"
    name = "Send Completion Notification"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        environments = ["production"]
        notes = "Email the deployer that the deployment has been completed."
        properties = {
            Octopus.Action.Email.Body = "#{Octopus.Release.Notes}"
            Octopus.Action.Email.IsHtml = "True"
            Octopus.Action.Email.Subject = "Release #{Octopus.Release.Number} has been deployed to #{Octopus.Environment.Name}"
            Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-an-aws-cloudformation-template" {
    name = "Deploy an AWS CloudFormation template"

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "mystack"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                AWSTemplateFormatVersion: "2010-09-09"
                
                Description: CloudFormation template to create PrivateLink infrastructure
                
                Metadata:
                  AWS::CloudFormation::Interface:
                    ParameterGroups:
                      - Label:
                          default: Domain Configuration
                        Parameters:
                          - DomainName
                          - HostedZone
                      - Label:
                          default: Network Configuration
                        Parameters:
                          - VpcId
                          - Subnets
                      - Label:
                          default: SAP Configuration
                        Parameters:
                          - IP
                          - Protocol
                          - Port
                          - HealthCheckPath
                          - InVpc
                
                Parameters:
                  DomainName:
                    Description: The fully qualified or wildcard domain name of DNS
                    Type: String
                
                  HostedZone:
                    Description: The public hostedZone of above domain name
                    Type: AWS::Route53::HostedZone::Id
                
                  VpcId:
                    Description: VpcId of your existing Virtual Private Cloud (VPC) where SAP resides
                    Type: AWS::EC2::VPC::Id
                
                  Subnets:
                    Description: The private subnets (must include one where SAP resides) of above VPC, recommend choose multiple covering different AZs
                    Type: List<AWS::EC2::Subnet::Id>
                
                  SecurityGroups:
                    Type: List<AWS::EC2::SecurityGroup::Id>
                
                  IP:
                    Description: SAP Gateway's private IP address within VPC
                    Type: String
                
                  Protocol:
                    Description: SAP Gateway's connect protocol
                    Type: String
                    AllowedValues:
                      - HTTP
                      - HTTPS
                    Default: HTTP
                
                  Port:
                    Description: SAP Gateway's HTTP or HTTPS (match with protocol you choose above) port number
                    Type: Number
                    Default: 50000
                
                  HealthCheckPath:
                    Description: SAP Gateway's ping path to do health check
                    Type: String
                    Default: /sap/public/ping
                
                  InVpc:
                    Description: Choose Yes if SAP resides in above VPC; choose No otherwise (in cases of above VPC just peers with another SAP residing VPC)
                    Type: String
                    AllowedValues:
                      - Yes
                      - No
                    Default: Yes
                
                Rules:
                  SubnetsInVPC:
                    Assertions:
                      - Assert:
                          Fn::EachMemberEquals:
                            - !ValueOf
                              - Subnets
                              - VpcId
                            - !Ref VpcId
                        AssertDescription: All subnets must in the VPC
                
                Conditions:
                  IpInVpc: !Equals
                    - !Ref InVpc
                    - Yes
                
                  SapUseHttps: !Equals
                    - !Ref Protocol
                    - HTTPS
                
                Transform: AWS::LanguageExtensions
                
                Resources:
                  ASCPrivateLinkCertificate:
                    Type: AWS::CertificateManager::Certificate
                    Properties:
                      DomainName: !Ref DomainName
                      ValidationMethod: DNS
                      DomainValidationOptions:
                        - DomainName: !Ref DomainName
                          HostedZoneId: !Ref HostedZone
                
                  ASCPrivateLinkLambdaRole:
                    Type: AWS::IAM::Role
                    Properties:
                      AssumeRolePolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                          - Effect: Allow
                            Action:
                              - sts:AssumeRole
                            Principal:
                              Service:
                                - lambda.amazonaws.com
                      Path: /
                      Policies:
                        - PolicyName: ASCPrivateLinkLambdaPolicy
                          PolicyDocument:
                            Version: "2012-10-17"
                            Statement:
                              - Effect: Allow
                                Action:
                                  - logs:CreateLogGroup
                                  - logs:CreateLogStream
                                  - logs:PutLogEvents
                                  - ec2:DescribeVpcEndpointServiceConfigurations
                                  - ec2:ModifyVpcEndpointServiceConfiguration
                                  - route53:ChangeResourceRecordSets
                                Resource: '*'
                
                  ASCPrivateLinkLambdaFunction:
                    Type: AWS::Lambda::Function
                    Properties:
                      Description: Lambda function to help with private link infrastructure setup
                      Handler: index.handler
                      Role: !GetAtt ASCPrivateLinkLambdaRole.Arn
                      Timeout: 900
                      Runtime: python3.12
                      VpcConfig:
                        SubnetIds: !Ref Subnets
                        SecurityGroupIds: !Ref SecurityGroups
                      Code:
                        ZipFile: !Sub
                          - |
                            import boto3
                            import cfnresponse
                            import logging
                            def handler(event, context):
                              print('Receive event: {} and context: {}'.format(str(event), str(context)))
                              responseData = {}
                              eventType = event['RequestType'].strip()
                              props = event['ResourceProperties']
                              try:
                                if eventType in ('Create'):
                                  match props['Action']:
                                    case 'EnablePrivateDNS':
                                      dnsClient = boto3.client('route53')
                                      ec2Client = boto3.client('ec2')
                                      serviceId = props['ServiceId']
                                      domainName = props['DomainName']
                                      hostedZoneId = props['HostedZoneId']
                                      ec2Client.modify_vpc_endpoint_service_configuration(ServiceId=serviceId, PrivateDnsName=domainName)
                                      validationRecord = ec2Client.describe_vpc_endpoint_service_configurations(ServiceIds=[serviceId])['ServiceConfigurations'][0]['PrivateDnsNameConfiguration']
                                      dnsClient.change_resource_record_sets(
                                        HostedZoneId=hostedZoneId,
                                        ChangeBatch={
                                          'Changes': [
                                            {
                                              'Action': 'UPSERT',
                                              'ResourceRecordSet': {
                                                'Type': validationRecord['Type'],
                                                'Name': '{}.{}'.format(validationRecord['Name'], domainName[2:] if domainName.startswith('*') else domainName),
                                                'ResourceRecords': [{'Value': '"{}"'.format(validationRecord['Value'])}],
                                                'TTL': 300
                                              }
                                            }
                                          ]
                                        }
                                      )
                                    case _:
                                      raise Exception('Unsupported action')
                                else:
                                  print('Skip on resource UPDATE and DELETE')
                                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                              except Exception as e:
                                logging.exception(e)
                                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                          - Region: !Ref AWS::Region
                
                  ASCPrivateLinkEnablePrivateDNS:
                    Type: Custom::CustomResource
                    DependsOn: ASCPrivateLinkVPCES
                    Properties:
                      ServiceToken: !GetAtt ASCPrivateLinkLambdaFunction.Arn
                      Action: EnablePrivateDNS
                      ServiceId: !Ref ASCPrivateLinkVPCES
                      DomainName: !Ref DomainName
                      HostedZoneId: !Ref HostedZone
                
                  ASCPrivateLinkNLB:
                    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
                    Properties:
                      Type: network
                      Scheme: internal
                      Subnets: !Ref Subnets
                      LoadBalancerAttributes:
                        - Key: load_balancing.cross_zone.enabled # SAP may only live in one AZ, need route to it if traffic from different AZ
                          Value: true
                
                  ASCPrivateLinkTargetGroup:
                    Type: AWS::ElasticLoadBalancingV2::TargetGroup
                    Properties:
                      VpcId: !Ref VpcId
                      Protocol: !If
                        - SapUseHttps
                        - TLS
                        - TCP
                      Port: 443
                      TargetType: ip
                      Targets:
                        - AvailabilityZone: !If
                            - IpInVpc
                            - !Ref AWS::NoValue
                            - all
                          Id: !Ref IP
                          Port: !Ref Port
                      HealthCheckPath: !Ref HealthCheckPath
                      HealthCheckProtocol: !Ref Protocol
                
                  ASCPrivateLinkListener:
                    Type: AWS::ElasticLoadBalancingV2::Listener
                    Properties:
                      LoadBalancerArn: !Ref ASCPrivateLinkNLB
                      Protocol: TLS
                      Port: 443
                      SslPolicy: ELBSecurityPolicy-TLS13-1-0-2021-06
                      Certificates:
                        - CertificateArn: !Ref ASCPrivateLinkCertificate
                      DefaultActions:
                        - Type: forward
                          TargetGroupArn: !Ref ASCPrivateLinkTargetGroup
                
                  ASCPrivateLinkVPCES:
                    Type: AWS::EC2::VPCEndpointService
                    Properties:
                      AcceptanceRequired: false
                      NetworkLoadBalancerArns:
                        - !Ref ASCPrivateLinkNLB
                
                  ASCPrivateLinkVPCESPermission:
                    Type: AWS::EC2::VPCEndpointServicePermissions
                    Properties:
                      AllowedPrincipals:
                        - appflow.amazonaws.com
                      ServiceId: !Ref ASCPrivateLinkVPCES
                
                Outputs:
                  CertificateURL:
                    Description: Go to this URL to check certificate issued or not (also find domain verification details)
                    Value: !Sub
                      - https://${AWS::Region}.console.aws.amazon.com/acm/home?region=${AWS::Region}#/certificates/${CertificateId}
                      - CertificateId: !Select
                          - 1
                          - !Split
                            - /
                            - !Ref ASCPrivateLinkCertificate
                
                  VPCEndpointServiceURL:
                    Description: Go to this URL to check VPC Endpoint Service attributes (also find privateDNS domain verification details)
                    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#VpcEndpointServiceDetails:EndpointServiceId=${ASCPrivateLinkVPCES}
                
                  TargetGroupURL:
                    Description: Go to this URL to check target group health check status (to see if got connectivity to SAP)
                    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#TargetGroup:targetGroupArn=${ASCPrivateLinkTargetGroup}
                EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"DomainName\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"HostedZone\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"VpcId\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"Subnets\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"SecurityGroups\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"IP\",\"ParameterValue\":\"\"},{\"ParameterKey\":\"Protocol\",\"ParameterValue\":\"HTTP\"},{\"ParameterKey\":\"Port\",\"ParameterValue\":\"50000\"},{\"ParameterKey\":\"HealthCheckPath\",\"ParameterValue\":\"/sap/public/ping\"},{\"ParameterKey\":\"InVpc\",\"ParameterValue\":\"Yes\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"DomainName\",\"ParameterValue\":null},{\"ParameterKey\":\"HostedZone\",\"ParameterValue\":null},{\"ParameterKey\":\"VpcId\",\"ParameterValue\":null},{\"ParameterKey\":\"Subnets\",\"ParameterValue\":null},{\"ParameterKey\":\"SecurityGroups\",\"ParameterValue\":null},{\"ParameterKey\":\"IP\",\"ParameterValue\":null},{\"ParameterKey\":\"Protocol\",\"ParameterValue\":\"HTTP\"},{\"ParameterKey\":\"Port\",\"ParameterValue\":\"50000\"},{\"ParameterKey\":\"HealthCheckPath\",\"ParameterValue\":\"/sap/public/ping\"},{\"ParameterKey\":\"InVpc\",\"ParameterValue\":\"Yes\"}]"
            Octopus.Action.Aws.Region = "us-east-1"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "True"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}